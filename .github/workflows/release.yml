name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags (e.g., v1.0.0, v2.1.3)

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  GO_VERSION: '1.21'

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64  # Windows ARM64 excluded for practicality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Download dependencies
      run: go mod download

    - name: Build redi-orm binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # Define binary name with platform suffix
        BINARY_NAME="redi-orm"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        BINARY_NAME="${BINARY_NAME}-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Build binary with version injection
        go build -o "${BINARY_NAME}" \
          -ldflags "-s -w -X main.version=${{ env.VERSION }}" \
          ./cmd/redi-orm
        
        # Verify binary was created and works
        if [ "${{ matrix.goos }}" != "windows" ]; then
          ./"${BINARY_NAME}" version || echo "Binary test failed, but continuing..."
        fi
        
        echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

    - name: Create archive
      run: |
        # Create platform-specific archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # Windows: ZIP archive
          zip "redi-orm-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip" "${BINARY_NAME}"
          echo "ARCHIVE_NAME=redi-orm-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip" >> $GITHUB_ENV
        else
          # Unix: TAR.GZ archive
          tar -czf "redi-orm-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" "${BINARY_NAME}"
          echo "ARCHIVE_NAME=redi-orm-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Generate checksums
      run: |
        # Generate SHA256 checksum
        if command -v sha256sum >/dev/null; then
          sha256sum "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
        elif command -v shasum >/dev/null; then
          shasum -a 256 "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-assets-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          *.zip
          *.tar.gz
          *.sha256
        retention-days: 1

  create-release:
    name: Create GitHub Release
    needs: release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: release-assets-*
        path: ./release-assets
        merge-multiple: true

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        # RediORM CLI ${{ env.VERSION }}

        ## What's New
        
        This release includes the RediORM CLI tool with comprehensive database migration and JavaScript runtime support.

        ## Features

        - **Multi-database support**: SQLite, MySQL, PostgreSQL
        - **Prisma-style schema definitions**: Familiar and powerful schema syntax
        - **JavaScript runtime**: Execute database operations using JavaScript with ORM support
        - **Migration system**: Auto-migration for development, file-based migrations for production
        - **Transaction support**: Full ACID transactions with savepoints
        - **Relation support**: One-to-one, one-to-many, many-to-many relations with eager loading
        - **Raw query support**: Execute custom SQL when needed

        ## Installation

        ### Download and Extract

        Choose the appropriate binary for your platform:

        **Linux (AMD64)**:
        ```bash
        wget https://github.com/rediwo/redi-orm/releases/download/${{ env.VERSION }}/redi-orm-${{ env.VERSION }}-linux-amd64.tar.gz
        tar -xzf redi-orm-${{ env.VERSION }}-linux-amd64.tar.gz
        chmod +x redi-orm-${{ env.VERSION }}-linux-amd64
        sudo mv redi-orm-${{ env.VERSION }}-linux-amd64 /usr/local/bin/redi-orm
        ```

        **Linux (ARM64)**:
        ```bash
        wget https://github.com/rediwo/redi-orm/releases/download/${{ env.VERSION }}/redi-orm-${{ env.VERSION }}-linux-arm64.tar.gz
        tar -xzf redi-orm-${{ env.VERSION }}-linux-arm64.tar.gz
        chmod +x redi-orm-${{ env.VERSION }}-linux-arm64
        sudo mv redi-orm-${{ env.VERSION }}-linux-arm64 /usr/local/bin/redi-orm
        ```

        **macOS (Intel)**:
        ```bash
        wget https://github.com/rediwo/redi-orm/releases/download/${{ env.VERSION }}/redi-orm-${{ env.VERSION }}-darwin-amd64.tar.gz
        tar -xzf redi-orm-${{ env.VERSION }}-darwin-amd64.tar.gz
        chmod +x redi-orm-${{ env.VERSION }}-darwin-amd64
        sudo mv redi-orm-${{ env.VERSION }}-darwin-amd64 /usr/local/bin/redi-orm
        ```

        **macOS (Apple Silicon)**:
        ```bash
        wget https://github.com/rediwo/redi-orm/releases/download/${{ env.VERSION }}/redi-orm-${{ env.VERSION }}-darwin-arm64.tar.gz
        tar -xzf redi-orm-${{ env.VERSION }}-darwin-arm64.tar.gz
        chmod +x redi-orm-${{ env.VERSION }}-darwin-arm64
        sudo mv redi-orm-${{ env.VERSION }}-darwin-arm64 /usr/local/bin/redi-orm
        ```

        **Windows (AMD64)**:
        1. Download `redi-orm-${{ env.VERSION }}-windows-amd64.zip`
        2. Extract the ZIP file
        3. Add the extracted `redi-orm-${{ env.VERSION }}-windows-amd64.exe` to your PATH or rename it to `redi-orm.exe`

        ### Verify Installation

        ```bash
        redi-orm version
        ```

        ## Quick Start

        ### 1. Create a schema file (schema.prisma)
        ```prisma
        model User {
          id    Int     @id @default(autoincrement())
          name  String
          email String  @unique
          posts Post[]
        }

        model Post {
          id       Int    @id @default(autoincrement())
          title    String
          content  String?
          authorId Int
          author   User   @relation(fields: [authorId], references: [id])
        }
        ```

        ### 2. Run migrations
        ```bash
        # Auto-migrate (development)
        redi-orm migrate --db=sqlite://./app.db --schema=./schema.prisma

        # Or generate migration files (production)
        redi-orm migrate:generate --db=sqlite://./app.db --schema=./schema.prisma --name="initial"
        ```

        ### 3. Use JavaScript API
        ```javascript
        // app.js
        const { fromUri } = require('redi/orm');

        const db = fromUri('sqlite://./app.db');
        await db.connect();

        // Load schema
        await db.loadSchemaFrom('./schema.prisma');
        await db.syncSchemas();

        // Create a user
        const user = await db.models.User.create({
          data: { name: 'Alice', email: 'alice@example.com' }
        });

        // Create a post
        const post = await db.models.Post.create({
          data: {
            title: 'Hello World',
            content: 'My first post',
            authorId: user.id
          }
        });

        // Query with relations
        const userWithPosts = await db.models.User.findUnique({
          where: { id: user.id },
          include: { posts: true }
        });

        console.log(userWithPosts);
        ```

        ### 4. Run the script
        ```bash
        redi-orm run app.js
        ```

        ## Security

        All release assets include SHA256 checksums for verification. You can verify the integrity of your download:

        ```bash
        # Linux/macOS
        sha256sum -c redi-orm-${{ env.VERSION }}-linux-amd64.tar.gz.sha256

        # Windows (PowerShell)
        Get-FileHash redi-orm-${{ env.VERSION }}-windows-amd64.zip -Algorithm SHA256
        ```

        ## Documentation

        - [GitHub Repository](https://github.com/rediwo/redi-orm)
        - [CLI Usage Guide](https://github.com/rediwo/redi-orm/blob/main/cmd/redi-orm/README.md)
        - [Examples](https://github.com/rediwo/redi-orm/tree/main/examples)

        ---

        **Full Changelog**: https://github.com/rediwo/redi-orm/compare/v0.0.1...${{ env.VERSION }}
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.VERSION }}
        name: RediORM CLI ${{ env.VERSION }}
        body_path: release_notes.md
        files: |
          release-assets/*.zip
          release-assets/*.tar.gz
          release-assets/*.sha256
        draft: false
        prerelease: false
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}